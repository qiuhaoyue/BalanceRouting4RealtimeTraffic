[text]{ :red }Title         : 实时路况计算系统
Author        : 张禹

Logo          : True
Email         : zhangrain911@163.com


Doc class     : [10pt]article


[TITLE]


[TOC]


# 1. 系统框架图 {-}

![new_framework]

[new_framework]: images/new_framework.jpg "new_framework" { width:auto; max-width:90% }




一天的路况以5分钟为一个阶段，分成288份路况。路况分为直接通过GPS点探测到的路况与通过历史路况信息推测补充的路况。

 * { color: #FF0000 }向勇的注：框架图中的箭头需要重新推敲一遍。我注意到的是，“路况推测”应该对“实时路况计算”有影响的。 

系统处理流程如下：

1. 系统启动时读取地图数据与历史路况，初始化道路路况，并根据机器CPU数(12)启动多个处理线程。

2. 模拟数据发送，接收GPS点之后随机将该点对应的出租车加入某一线程的处理列表中，GPS点放入出租车队列中，等待处理
3. 处理线程以轮询方式读取列表中的出租车suid，一次处理出租车队列中的所有数据。
4. GPS点经过预处理，道路匹配后根据与上一个点的位置关系探测路况，并将路况提交，实时路况模块中接收到路况提交信息后根据GPS点时间信息确认路况所属的时间阶段，若该阶段大于道路现有的路况阶段数，则将当前路况写入数据库，并更新道路路况与阶段数，同时将路况更新至历史路况数据库。
若路况已过时，允许延迟一个阶段数的路况更新，但不会写入数据库。
6. 当一条道路的前后2个阶段的差值小于某一阈值时，进行路况的自动补充，并根据推测结果对路况进行修正。


# 2. 模块说明 {-}

## 2.1 模拟数据发送: {-}
根据GPS点的utc字段确认该点的发送时间。根据4.1的实验结果。采用2倍速率发送数据，一天的数据12小时发送完毕。

## 2.2 出租车队列: {-}
系统接收出租车数据后根据suid放入对应的出租车队列，等待线程处理，若该suid第一次出现，则将该suid随机添加至某一线程的出租车列表。

  输入：原始GPS流(suid, utc, lat, lon, head, ostdesc)(省略某些不用的属性)
  
  输出：按suid分割的GPS流，按照suid存入内存队列。

## 2.3 线程： {-}
程序开始时即按系统资源创建n个线程，每个线程维护一张出租车列表，并以轮询的方式处理列表中suid对应的出租车队列中的缓存数据。
  
  
输入：出租车suid以及该辆出租车队列中的缓存数据。
  
输出：启动一个线程，根据轨迹序列进行路况计算。
  
## 2.4 预处理: {-}
预处理包含2部分：

* 在地图匹配之前筛去定位无效（GPS字段中包含定位是否有效地信息）与时间异常的点
* 地图匹配之后GPS的经纬度得到了修正，此时再根据点之间的位置信息做预处理，筛去速度异常(静止或速度过快)的点

输入：原始GPS点
  
输出：根据时间或位置信息筛选过后的点

## 2.5 OHMMM道路匹配算法： {-}
在线的HMMM匹配算法，有一定延迟，根据4.3的实验将匹配窗口大小设为6（若1分钟一个点，则延迟最大为6分钟，但根据该算法原始论文的实验结果，窗口大小
大于4之后，平均延迟不变）。输出的GPS点带有
  Gid，Edge_offset,route三个字段，分别表示将这个点匹配的道路id，偏移以及这个点的前一个点到当前sample通过的路径。
  
  
  输入：GPS点
  
  输出：输出添加了Gid, Edge_offset, route 3个属性的GPS点。

 
  
## 2.6 实时路况计算模块： {-}
根据匹配成功的GPS点计算路况。如果该点与上一个轨迹点在同一道路上则直接计算该道路路况，如果与上一个点不在
同一条道路上，则需要先计算与上一个点之间的路由，并计算路由上所有道路的路况，具体见3.2节的实时路况计算算法


  输入：单个GPS点。
  
  输出：计算出该GPS点探测到的路况并提交至路况处理模块。
  
## 2.7 路况处理模块： {-}
负责对提交的路况（探测到的路况或推测出的路况）进行平滑处理，并更新内存中的路况。

  输入：某条道路的路况信息以及探测的时间信息
  输出：对道路的路况进行更新。

## 2.8 路况推测模块： {-}
道路一天的路况以5分钟为间隔分成288个阶段的路况，如果探测到的2个阶段的路况间出现了路况的缺失，且2个阶段的差值在阈值范围内，则进行路况推测。
具体见3.3节的路况推测算法。

  输入：历史路况与已有的道路路况
  
  输出：推测出的道路路况
    

# 3. 核心算法 {-}

## 3.1 道路匹配： {-}
算法参考论文：“Online map-matching based on Hidden Markov model for real-time traffic sensing applications”

  实现：[在线的HMMM算法]，在这基础上做了进一步的修改。
 
## 3.2 路况计算： {-}

路况模型：忽略道路之间连接的内部细节（立交桥等较为复杂的道路转换设施），只考虑两两道路间的转向延迟。

![road_model]

道路速度包括道路上的直行速度(t~R1~)与驶向其它路口的转向延迟(t~R1,R3~,t~R1,R4~,t~R1,R2~，包括在道路转换设施
中的行驶时间与交通信号带来的时间消耗)。

例如从R1到R2的行驶时间 = t~R1~ + t~R1,R2~

[road_model]: images/road_model.jpg "road_model" { width:auto; max-width:90% }



![update_traffic]

[update_traffic]: images/update_traffic.jpg "update_traffic" { width:auto; max-width:90% }


    如图所示，对于未切换道路的点，直接计算当前道路的路况即可，道路改变的点需要对路由上的每一条道路的路况进行计算.
    超过95%的情况前后2个轨迹点不在同一条道路上。
    
 * { color: #FF0000 } 向勇的注：对于路况计算的一种可能改进思路是，引入路口转向延时。这对后续的路况计算结果的可能利用是有用的。目前的这个计算方法得到的速度应该会真实情况低。


    路况探测完成后向道路提交探测速度以及路况的时间信息，再进行进一步的平滑
    
    1.当前点与前一个点在同一条道路上:
    
		  if offset = 0 && 道路速度 < 交通拥塞的速度阈值:
		    探测速度=0(探测速度为0时道路的速度 *= 0.9，以指数速度递减)
          else:
		    探测速度 = offset * 道路长度 / 间隔；

    2.道路改变:

        获取当前点与上一个点的路由；
        for each road in route://遍历出租车从上一个点到当前点经过的所有道路
          计算出租车在道路上的覆盖率;
          根据覆盖率计算在当前道路上消耗的时间，具体公式为覆盖率*当前道路长度/道路速度 + 转向时间;
          将算得的时间累加到totaltime;
        for each road in route that has coverage://所有成功算出覆盖率的道路，可能有路段出现异常
          计算当前道路的通过时间以及到下一条道路的转向时间的和在total_time中的比重，具体公式为：
		  percentage = (覆盖率*当前道路长度/道路速度 + 转向时间) / total_time;
		  计算实际花费的时间 real_time = interval(当前点与上一个点的时间间隔) * percentage；
		  按比例分配行驶时间与转向时间；例如 转向时间 = real_time * 转向时间/(转向时间 + 行驶时间)；
    
  3.平滑:
  
  
  平滑因子 = 0.9 - (sensed_seq - cur_seq) \* 0.05;
  
  (sensed_seq为探测到的路况的阶段数，cur_seq为道路当前路况所处的阶段。道路上一阶段的路况与当前阶段
  间隔越大，上一阶段路况对当前路况的影响越小，最小值为0)
  
  路况 = 平滑因子 \* 当前路况 + (1 - 平滑因子) \* 探测路况

 * { color: #FF0000 } 向勇的注：平滑参数的选择有分析实验吗？我好象没有印象了。
 

## 3.3 路况推测： {-}

当道路的2个阶段(seq1, seq2)间出现路况缺失时通过道路在seq1时的速度，历史路况在seq1，seq1 + i 时的速度，
以及seq1 + i 时历史路况中同类道路的平均速度进行路况推测补充（i<=2）。补充的路况的平均速度应尽量接近
探测速度。

为避免推测出的速度与真实速度差距过大，对推测的速度进行横向(以上一个阶段的速度作为基准)，
纵向（以历史路况中当前道路当前阶段的速度作为基准）的速度限制，将同类道路的
平均速度作为一个阶段(5分钟)内速度变化的最大幅度。

          pre_seq, cur_seq为道路探测到路况的2个阶段。
          pre_speed = 历史路况中pre_seq所对应的该道路的速度;
          road_speed = 探测到的该道路在pre_seq的道路速度
          修正因子 = road_speed / pre_speed;
          
          for(int i=pre_seq+1; i<= pre_seq + 推测跨度; i++){
            default_speed = 历史路况中当前道路在该阶段的速度;
            class_speed = 同类道路在该阶段的平均速度;
            
            //为防止路况突变，对路况做限制
            //横向，已探测到的路况作为基准，class_speed作为一个阶段内最大的道路变化值
            max_speed_limit = road_speed + (i- pre_seq) * class_speed;
				    min_speed_limit = road_speed - (i- pre_seq) * class_speed;
            //纵向，已历史路况的路况作为基准
            if(max_speed_limit > default_speed + class_speed){
					      max_speed_limit = default_speed + class_speed;
				    }
				    if(min_speed_limit < default_speed - class_speed){
					      min_speed_limit = default_speed - class_speed;
				    }
            
            infer_speed = 修正因子 * default_speed in [min_speed_limit, max_speed_limit];
            
            if(i < cur_seq){
              插入道路在该阶段推测出的路况infer_speed;
            }
            else{
              将infer_speed看作探测到的路况对路段路况进行平滑操作。
              break;
            }
          }



# 4. 实验日志 {-}
注：实验4.1~4.3使用的都是4月6号的数据。

## 4.1 处理速度 {-}

以正常速度，2倍，4倍, 8倍速率模拟数据发送时探测到的路况数量为：

![traffic_number_total]

[traffic_number_total]: images/traffic_number_total.png "traffic_number_total" { width:auto; max-width:90% }

4倍发送速率下探测到的路况与正常速率下基本吻合（由于多线程处理时对数据的
操作顺序有一定的随机性，所以探测到的数量不完全相同），8倍速度时，由于在数据高峰期时出租车队列中的GPS点累积较多，
时间跨度过大，导致部分GPS点由于时间过早而失效，由此探测到的路况也不会写入数据库(但仍会对路况产生影响，路况的更新允许10分钟的延迟)。


 * { color: #FF0000 } 向勇的注：需要解释，为什么不同的处理速度下，计算出的速度会有不同？

不同发送速率下探测到的道路平均速度为：

![average_speed_comparison]

[average_speed_comparison]: images/average_speed_comparison.png "average_speed_comparison" { width:auto; max-width:90% }

8倍速率下由于探测到的路况数量变少，所以平均速度变化的幅度比正常情况下小，而且抖动较大。

* { color: #FF0000 } 这张图的数据需要用最新的算法跑一下（没有延迟更新路况的功能），新的算法跑8倍速失真情况应该小一点。
注：由于现在尚未添加道路的初始速度获取，所以从凌晨开始需要一定的时间进行迭代才能接近真实路况。

## 4.2 窗口大小对匹配精确度的影响 {-}

选取suid小于1500的447辆出租车轨迹，与离线的HMMM比较，静止不动的点只处理一次，未对超时点做处理。对不同窗口大小下的匹配差错率以及由此计算出的路由差错率进行比较

实验结果如下：

![map-matching_comparison]

[map-matching_comparison]: images/map-matching_comparison.png "map-matching_comparison" { width:auto; max-width:90% }

出租车数据中前后2个轨迹点不在同一条道路上的比例占94%(2742406条)，由于是通过路由算出的路况，可靠度比同一条道路上的两个点探测出的低。
如果一个点匹配错误，路由经过的道路路况都会受到影响。

但由于错误匹配的道路在地理位置上与正确道路往往较为接近，所以即使道路匹配错误，正确与错误的路由间仍会有部分道路重合，所以路由的错误率只有道路
匹配错误率的1/5左右。 需要注意的是，正确与错误的路由的重合部分的道路探测到的速度有差异。

另外，在实验中，道路匹配窗口越大，遗留在窗口中的匹配点越多，输出的匹配成功的点越少，可用作比较的点少。
所以不同窗口大小与离线匹配结果比较的数量不同，上述实验的结果随着窗口变大会有一定抖动。

 * { color: #FF0000 } 向勇的注：这一部分的分析不太通顺，我没有明白。需要好好修改。
 

## 4.3 窗口大小对探测到的道路速度的影响 {-}

不同窗口大小下的平均速度几乎吻合，可能的原因是：
由于窗口变大，最大延迟增加，而每5分钟写入一次路况粒度太细，
比较不同窗口大小下的路况意义不大，
效果也不好，所以不以时间为单位，而是以每条路一天的平均路况为单位计算。
以窗口大小12为baseline，窗口大小为6时效果突出。

以窗口大小为12时探测的路况作为baseline，道路一天速度的平均差错率以及探测到的不同道路路况的数量：

<!-- begin merge (remove this line to resolve the conflict) -->
~ Begin Remote

| 窗口大小  |  平均差错率  | 路况数
|:----|:---------:|:------:|
|4|0.5982770077347543| 7764.0|
|6|0.20345720192456906| 1427.0
|8|0.6037075364477941| 7601.0
|10|0.5962989321010983| 7373.0

将路况的5分钟一次间隔扩大至60分钟，且路况对比为两两比较，4与6，6与8，以此类推

| 窗口大小比较  |  平均差错率  | 路况数
|:----|:---------:|:------:|
|4&6|0.6335721425201148| 7483.0
|6&8|0.5386980322977708| 7227.0
|8&10|0.5446761308567067| 7620.0
|10&12|0.5351924154831883| 7388.0

匹配窗口变大，一方面匹配精确度有提高，另一方面，由于遗留在窗口中的点变多，又导致实时路况的不精确，很难去衡量窗口大小对于路况的平均速度的影响。

由匹配精确度的图以及上述结论，暂时以6作为窗口大小算一周数据，尽量补充缺失的路况。

~ End Remote
<!-- end merge -->


## 4.4 道路初始速度的获取 {-}
一周数据路况图： 0201和0208的路况有抖动。

![week_0201-04]
![week_0205-08]
![history_traffic]

[history_traffic]: images/history_traffic.png "history_traffic" { width:auto; max-width:90% }


[week_0201-04]: images/week_0201-04.png "week_0201-04" { width:auto; max-width:90% }

[week_0205-08]: images/week_0205-08.png "week_0205-08" { width:auto; max-width:90% }


系统启动时从历史库信息中获取当前时间段已知的路段信息，对于未知的路段，使用同等级别道路的平均速度作为初始值.
当天计算出的路况会自动更新至历史库。

使用一周的数据(0201-0208)生成历史库信息，共5940900条路况，由于探测到的路况在开始时初始速度固定，需要一定时间的迭代才能接近真实值，所以
0点的初始路况以23:55-24:00的路况作为初始值。

加入系统初始值后一天的路况分析(0202)：
总的路况： ![init_week_0202]

不同类型道路的路况比较： ![week_0202]

总共有28类道路，探测到的路况主要在如下类别的道路上

| class_id  |  name  | 路况数
|:----|:---------:|:------:|
| 104 | trunk     | 172747 |
| 106 | primary   | 162314 |
| 108 | secondary | 343078 |
| 109 | tertiary  | 575388 |
| 110 | residential  | 174404 |



[week_0202]: images/week_0202.png "week_0202" { width:auto; max-width:90% }

[init_week_0202]: images/init_week_0202.png "init_week_0202" { width:auto; max-width:90% }
<!-- end merge -->

## 4.5 道路速度的补充 {-}

在历史路况与当前探测到的路况的基础上，对道路之后2个时间段（10分钟）的道路速度进行推测。详细见3.3节道路推测算法。

补充的路况目的是增加路况数量，且平均速度应尽量与探测到的路况接近。
![infer_week_0207(2)]

[infer_week_0207(2)]: images/infer_week_0207(2).png "infer_week_0207(2)" { width:auto; max-width:90% }
探测出的路况与根据历史路况推测出的路况的比较。

 * { color: #FF0000 } 向勇的注：总体感觉是，你的分析部分的文字还需要好好组织一下。目前版本还不通顺，描述也不是很准确。


[在线的HMMM算法]: https://github.com/bmwcarit/barefoot

# 5. 相关工作调研 {-}

1. Real-time freeway traffic state estimation based on extended Kalman filter: a general approach

  对于高速公路上的路况计算采用模型(extended Kalman filter)的方式估计各类变量，但高速公路的情况较为简单，该方法在城市中不适用。

2. Real-Time Traffic Volume Estimation with Fuzzy Linear Regression
  
  同样是基于模型，对交通流量进行预测，较为精确，但模型的输入是道路的流量与拥挤程度，对于浮动车来说无法直接获取到这2种信息。

3. Study on Vehicle Navigation System with Real-time Traffic Information

  利用探测车来探测，由中心节点进行汇总，计算路况，并提供导航。具体如何计算路况或导航并没有介绍。除了静态路段外，根据路况以及道路的属性进行动态的道路分段(可能跨越多个物理道路)。实验也是在北京做的。

4. Traffic Estimation And Prediction Based On Real Time Floating Car Data

  基于600，000辆私家车gps数据的实时路况系统，3分钟更新一次，通过网页可以获取，主要是针对意大利的摩托车道和一些主干道。

  道路匹配(经纬度和方向)->计算路由->计算路由道路上的时间，与我们的计算过程类似，但并没有给出具体实现，最后提供了几种估计未来路况的方法。

5. Real-time urban traffic monitoring with global positioning system-equipped vehicles

  使用point-to-curve道路匹配算法(做了改进)。使用eSMS（estimated space mean speed）并将其转换为更合理的路况量度

  1.道路匹配后的预处理：存储gps点，相同路段的点存在同一个数据结构中，对于每一个数据结构(对应一个路段),计算其第一个点到每个点的曲线距离，并作为gps点的一个属性存储。
  
  2.求eSMS：将某一路段上的点的速度曲线近似为2次方程。但计算路况时只取其平滑的部分(对加速度做限制)作为参考，并计算平均速度。最后对所有车的速度求eSMS。同一条道路有连续多个点时才能这样计算
  。
  
  3.将eSMS转化为一个更合理的smooth index(0,1之间，0表示拥堵，1表示畅通)

  实验：上海6000辆出租车。该方法将状态为空车的出租车数据丢弃，每4分钟算一次，没有考虑不同道路之间的路由。通过视频来人工判断路况，分5个等级，时间花费也较低

6. (1)Real-time Urban Traffic Sensing with GPS Equipped
Probe Vehicles (2) Scaling the Real-time Traffic Sensing with GPS Equipped Probe Vehicles

  在storm上部署实时路况探测，同样丢弃了空车的数据点，使用HMMM进行道路匹配，Fuzzy C-Means Clustering algorithm来去除一些不正常的行驶行为对路况的影响，将车辆探测到的速度分为2组，高速与低速，只有规模大的那一组会被采用。道路匹配是最耗时的部分

7. Traffic State Detection with Floating Car Data in Road Networks

  考虑了trafic center和出租车的信息交互过程。最小化信息交互次数，出租车在本地判断是否将该车在某一道路上的travel time（进入道路与离开道路的时间差）上传至中心(若travel time与本地已知的time差距大于某一阈值，则上传)。
出租车在离开道路后上传路况，中心需要对时间做修改，比如10：45上传出租车通过道路A需要30分钟，那么该路况同时也是10：15得路况。

  对路况做预测，并做动态导航
以预测为主，出租车的数据用于纠正历史信息，所以始终是有延迟的

#6.备注 {-}

## 6.1 双向道路的拆分 {-}
更新了osm2pgrouting的版本到2.1，新版本对于oneway的处理较好，导入的表中保留有one_way字段（0-未知,1-单向,2-双向,-1-单向但是几何上方向是相反的）

共有87377条道路one_way为0的有52139，-1的有101,1的有34636,2的有501条。拆分完后共140121条道路。

## 6.2 匹配失败的点的备份 {-}
对于无法正确匹配但本身没有异常的点保存在match_fail_gps表中，用作以后挖掘新的道路。例子：(12788,2010-04-06 00:00:24)	lat:39.91935,lon:116.53758,head:357,speed:22.12,distance:0,min_matching_distance:-1.0, (12788,2010-04-06 00:01:24)	lat:39.93131,lon:116.53687,head:357,speed:22.12,distance:0,min_matching_distance:-1.0, (12788,2010-04-06 00:02:24)	
lat:39.9396,lon:116.53815,head:72,speed:15.43,distance:0,min_matching_distance:-1.0, (12788,2010-04-06 00:03:19)