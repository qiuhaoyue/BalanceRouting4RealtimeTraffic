Title         : 实时路况计算系统
Author        : 张禹

Logo          : True
Email         : zhangrain911@163.com


Doc class     : [10pt]article


[TITLE]


[TOC]


# 1. 系统框架图 {-}

![new_framework]

[new_framework]: images/new_framework.jpg "new_framework" { width:auto; max-width:90% }



黄色部分为线程的一次执行,棕红色为路况结果。




# 2. 模块说明 {-}

## 2.1 模拟数据发送: {-}
按照GPS点的utc时间进行发送，发送当前时间的GPS点，并休眠直至下一个点的utc。24小时数据24小时发送完毕，后续进行2倍速（当前1秒发送后续2秒的数据，以此类推），4倍速的测试。

## 2.2 出租车队列: {-}
系统接受出租车数据后根据suid放入对应的出租车队列，等待线程进行处理，若该suid第一次出现，则将该suid随机添加至某一线程的出租车列表。

  输入：原始GPS流(suid, utc, lat, lon, head, ostdesc)(省略某些不用的属性)
  
  输出：按suid分割的GPS流，GPS点按照suid存入内存队列。

## 2.3 线程： {-}
程序开始时即按系统资源创建n个线程，每个线程维护一张出租车列表，并以轮询的方式处理列表中出租车队列中的缓存数据。
  
  
输入：出租车suid以及该辆出租车队列中的缓存数据。
  
输出：启动一个线程，根据轨迹序列进行路况计算。
  
## 2.4 预处理: {-}
对将要进行匹配的点进行简单的预处理，包括点的时间顺序判断，通过与前一个点的比较判断是否存在暂停，是否超时（若与前一个点的时间间隔超过阈值，将清空之前的点）

  输入：原始GPS点
  
  输出：可用的GPS的点
  
## 2.5 OHMMM道路匹配出租车队列： {-}
在线的HMMM匹配，有一定延迟，目前设定的匹配窗口最大值为5（若1分钟一个点，则延迟最大为5分钟）。输出的GPS点带有
  Gid，Edge_offset,route三个字段，分别表示将这个点匹配的道路id，偏移以及这个点的前一个点到当前sample通过的路径。
  
  
  输入：GPS点
  
  输出：输出添加了Gid, Edge_offset, route 3个属性的GPS点。

  
## 2.6 轨迹切割： {-}
判断当前队列中的点是否满足切割条件，当车辆行驶的路段发生改变或车辆处于长暂停时进行轨迹切割
  
  
  输入：队列中的gps点信息。
  
  输出：满足切割条件时，输出GPS序列，否则输出当前的单个GPS点。
  

  
## 2.7 轨迹预处理： {-}
输入同一辆出租车的点序列，根据距离与时间间隔（可修改）插入点的长暂停标记。以后可能会添加轨迹相关的筛选。
  
  
  输入：单辆出租车的GPS点序列。
  
  输出：单辆出租车的GPS点序列，每个GPS点添加属性stop。
  
## 2.8 实时路况计算模块： {-}
根据新获取的GPS点计算路况。如果与上一个GPS点在同一道路上则直接更新该道路路况，如果上一个点不在
同一道路上，则需要先计算与上一个点之间的路由，并更新路由上所有道路的路况，具体见3.4节的实时路况计算算法
  
  输入：单个GPS点。
  
  输出：更新内存中的实时路况。
  


## 2.9 依据轨迹的路况计算模块： {-}
待定。依据参考文献，可能的做法：对轨迹点的速度做平滑后计算速度，或为避免用户不当操作，将速度分类，去除比重较小的速度。暂未实现
  
  输入：单辆出租车的GPS点序列
  
  输出：单条道路的较为准确的路况，对内存中的路况做反馈


  
  
## 2.10 GPS备份： {-}
为实验需求，对处理完的GPS进行备份，未匹配成功的GPS同样进行备份，供后续的新道路挖掘。
    
输入：处理完毕的GPS流(suid, utc, lat, lon, head, ostdesc, stop, Gid, Edge_offset, route, interval, pre_gid, ore_offset)
    
输出：写入GPS数据库。
    

# 3. 核心算法 {-}
## 3.1 轨迹长暂停标记： {-}

![label_stop]

[label_stop]: images/label_stop.jpg "label_stop" { width:auto; max-width:90% }


设定一个距离阈值，时间阈值。

      for point in GPS sequence:
        以当前点为基准，选出在该点之前且距离在阈值内的所有点作为集合A；
        for point in A:
          求出集合A中的点与当前点的时间间隔；
        将时间间隔大于阈值的点标记为长暂停；
 
## 3.2 轨迹预处理: {-}
暂不考虑
        
## 3.3 道路匹配： {-}
算法参考论文：“Online map-matching based on Hidden Markov model for real-time traffic sensing applications”

  实现：[在线的HMMM算法]，在这基础上可能会进一步修改。
 
## 3.4 路况计算： {-}


![update_traffic]

[update_traffic]: images/update_traffic.jpg "update_traffic" { width:auto; max-width:90% }


    如图所示，对于未切换道路的点，直接计算当前道路的路况即可，道路改变的点需要对路由上的每一条道路的路况进行计算
    
    1.当前点与前一个点在同一条道路上；
		if offset = 0 && 道路速度 < 交通拥塞的速度阈值:
		  道路速度 = 道路速度 * 0.9；
		探测速度 = offset * 道路长度 / 间隔；
		平滑速度 = 道路速度 * 0.9 + 探测速度 * 0.1；
			
  
    2.道路改变；

        获取当前点与上一个点的路由；
        for each road in route://遍历出租车从上一个点到当前点经过的所有道路
          计算出租车在道路上的覆盖率;
          根据覆盖率计算在当前道路上消耗的时间，具体公式为覆盖率*当前道路长度/道路速度 + 转向时间;
          将算得的时间累加到totaltime;
        for each road in route that has coverage://所有成功算出覆盖率的道路，可能有路段出现异常
          计算当前道路的通过时间以及到下一条道路的转向时间的和在total_time中的比重，具体公式为：
		  percentage = (覆盖率*当前道路长度/道路速度 + 转向时间) / total_time;
		  计算实际花费的时间 real_time = interval(当前点与上一个点的时间间隔) * percentage；
		  按比例分配行驶时间与转向时间；例如 转向时间 = real_time * 转向时间/(转向时间 + 行驶时间)；
    
  

 

# 4. 相关工作调研 {-}

1. Real-time freeway traffic state estimation based on extended Kalman filter: a general approach

  对于高速公路上的路况计算采用模型(extended Kalman filter)的方式估计各类变量，但高速公路的情况较为简单，该方法在城市中不适用。

2. Real-Time Traffic Volume Estimation with Fuzzy Linear Regression
  
  同样是基于模型，对交通流量进行预测，较为精确，但模型的输入是道路的流量与拥挤程度，对于浮动车来说无法直接获取到这2种信息。

3. Study on Vehicle Navigation System with Real-time Traffic Information

  利用探测车来探测，由中心节点进行汇总，计算路况，并提供导航。具体如何计算路况或导航并没有介绍。除了静态路段外，根据路况以及道路的属性进行动态的道路分段(可能跨越多个物理道路)。实验也是在北京做的。

4. Traffic Estimation And Prediction Based On Real Time Floating Car Data

  基于600，000辆私家车gps数据的实时路况系统，3分钟更新一次，通过网页可以获取，主要是针对意大利的摩托车道和一些主干道。

  道路匹配(经纬度和方向)->计算路由->计算路由道路上的时间，与我们的计算过程类似，但并没有给出具体实现，最后提供了几种估计未来路况的方法。

5. Real-time urban traffic monitoring with global positioning system-equipped vehicles

  使用point-to-curve道路匹配算法(做了改进)。使用eSMS（estimated space mean speed）并将其转换为更合理的路况量度

  1.道路匹配后的预处理：存储gps点，相同路段的点存在同一个数据结构中，对于每一个数据结构(对应一个路段),计算其第一个点到每个点的曲线距离，并作为gps点的一个属性存储。
  
  2.求eSMS：将某一路段上的点的速度曲线近似为2次方程。但计算路况时只取其平滑的部分(对加速度做限制)作为参考，并计算平均速度。最后对所有车的速度求eSMS。同一条道路有连续多个点时才能这样计算
  。
  
  3.将eSMS转化为一个更合理的smooth index(0,1之间，0表示拥堵，1表示畅通)

  实验：上海6000辆出租车。该方法将状态为空车的出租车数据丢弃，每4分钟算一次，没有考虑不同道路之间的路由。通过视频来人工判断路况，分5个等级，时间花费也较低

6. (1)Real-time Urban Traffic Sensing with GPS Equipped
Probe Vehicles (2) Scaling the Real-time Traffic Sensing with GPS Equipped Probe Vehicles

  在storm上部署实时路况探测，同样丢弃了空车的数据点，使用HMMM进行道路匹配，Fuzzy C-Means Clustering algorithm来去除一些不正常的行驶行为对路况的影响，将车辆探测到的速度分为2组，高速与低速，只有规模大的那一组会被采用。道路匹配是最耗时的部分

7. Traffic State Detection with Floating Car Data in Road Networks

  考虑了trafic center和出租车的信息交互过程。最小化信息交互次数，出租车在本地判断是否将该车在某一道路上的travel time（进入道路与离开道路的时间差）上传至中心(若travel time与本地已知的time差距大于某一阈值，则上传)。
出租车在离开道路后上传路况，中心需要对时间做修改，比如10：45上传出租车通过道路A需要30分钟，那么该路况同时也是10：15得路况。

  对路况做预测，并做动态导航
以预测为主，出租车的数据用于纠正历史信息，所以始终是有延迟的

# 5. 改进方向 {-}

  1. 计算当前的实时路况，不对点做分割，接受一个点处理一个点，另外有另一个进程进行延时处理，
进行轨迹切割(切割的时机可能有：1.长暂停，避免探测的路况与当前相隔太久而没有参考价值 2.行驶的道路发生了改变，道路改变后需要保留上一条道路的信息)，
计算更精准的路况(轨迹多，道路匹配更精确，借此导出的路由也更准确)，并根据该路况对实时路况进行反馈(如果道路相同，速度有出入，则对速度进行修正，如果道路不同，则尽量消除之前由该轨迹探测的路况对当前路况的影响)。

  2. 因为一条道路总的路况分为路口转向时间与行驶时间，路口信号的影响可以不用考虑，包含在转向延迟里。
  
  3. 对于无法正确匹配但本身没有异常的点单独存一份，用作以后挖掘新的道路。例子：(12788,2010-04-06 00:00:24)	lat:39.91935,lon:116.53758,head:357,speed:22.12,distance:0,min_matching_distance:-1.0, (12788,2010-04-06 00:01:24)	lat:39.93131,lon:116.53687,head:357,speed:22.12,distance:0,min_matching_distance:-1.0, (12788,2010-04-06 00:02:24)	lat:39.9396,lon:116.53815,head:72,speed:15.43,distance:0,min_matching_distance:-1.0, (12788,2010-04-06 00:03:19)


# 6. 实验日志 {-}

## 6.1 处理速度 {-}

路况数量在更新临界点（5分钟）时有一定随机性，更新路况时容许比当前seq-1的路况更新，即最迟10分钟前的路况

模拟数据发送，按gps点的utc发送数据，在正常速度，2倍，4倍, 8倍发送速率下探测到的路况数量为：

![traffic_number_total]

[traffic_number_total]: images/traffic_number_total.png "traffic_number_total" { width:auto; max-width:90% }

探测到的道路平均速度为：

![average_speed_comparison]

[average_speed_comparison]: images/average_speed_comparison.png "average_speed_comparison" { width:auto; max-width:90% }

由于现在尚未添加道路的初始速度获取，所以从凌晨开始需要一定的时间进行迭代才能接近真实路况。

## 6.2 窗口大小对匹配精确度的影响 {-}

统计同一条道路和不同道路的路况数：

同一条道路：177312，数量少但质量高

不同道路：2742406，占94%，如果一个点匹配错，将会导致路由的错误，从而影响探测到的路况的错误（扩大）

匹配窗口大小实验，选取suid小于1500的447辆出租车轨迹，与离线的HMMM比较，静止不动的点只处理一次，未对超时点做处理。对不同窗口大小下的匹配差错率以及由此计算出的路由差错率进行比较

![mapmatching-comparison]

[mapmatching-comparison]: images/mapmatching-comparison.png "mapmatching-comparison" { width:auto; max-width:90% }

由于匹配错误的道路与正确道路往往较为接近，所以即使道路匹配错误，仍有一部分路由重合，路由的错误率只有道路匹配错误率的1/5左右

## 6.3 双向道路的拆分 {-}

更新了osm2pgrouting的版本到2.1，新版本对于oneway的处理较好，导入的表中保留有one_way字段（0-未知,1-单向,2-双向,-1-单向但是几何上方向是相反的）

共有87377条道路one_way为0的有52139，-1的有101,1的有34636,2的有501条。拆分完后140121条

[在线的HMMM算法]: https://github.com/bmwcarit/barefoot


